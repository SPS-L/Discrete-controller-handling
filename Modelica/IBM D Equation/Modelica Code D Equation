model BDCustomIBM
  Modelica.Blocks.Sources.Step step;
  Modelica.Blocks.Continuous.StateSpace stateSpace(
    A=[-0.04, sqrt(0.02^2 + 0.9^2); -sqrt(0.02^2 + 0.9^2), 0],
    B=[-sqrt(0.02^2 + 0.9^2); 0],
    C=[1, 0; 0, 1],
    D=[0; 0],
    x_start={0,0});
  IBM.IBMController iBMController;
equation 
  connect(iBMController.y, stateSpace.u[1]);
  connect(iBMController.uo, stateSpace.y[2]);
  connect(step.y, iBMController.uf);
end BDCustomIBM;
 
block Modelica.Blocks.Sources.Step 
  "Generate step signal of type Real"
  parameter Real height=1 "Height of step";
  extends Interfaces.SignalSource;

equation 
  y = offset + (if time < startTime then 0 else height);
end Step;
 
partial block Modelica.Blocks.Interfaces.SO 
  "Single Output continuous control block"
  extends Modelica.Blocks.Icons.Block;

  RealOutput y "Connector of Real output signal";

end SO;
 
connector Modelica.Blocks.Interfaces.RealOutput = output Real 
  "'output Real' as connector";
 
partial block Modelica.Blocks.Icons.Block 
  "Basic graphical layout of input/output block"


end Block;
 
partial block Modelica.Blocks.Interfaces.SignalSource 
  "Base class for continuous signal source"
  extends SO;
  parameter Real offset=0 "Offset of output signal y";
  parameter SI.Time startTime=0 "Output y = offset for time < startTime";
end SignalSource;
 
block Modelica.Blocks.Continuous.StateSpace 
  "Linear state space system"
  import Modelica.Blocks.Types.Init;
  parameter Real A[:, size(A, 1)]=[1, 0; 0, 1] 
    "Matrix A of state space model (e.g., A=[1, 0; 0, 1])";
  parameter Real B[size(A, 1), :]=[1; 1] 
    "Matrix B of state space model (e.g., B=[1; 1])";
  parameter Real C[:, size(A, 1)]=[1, 1] 
    "Matrix C of state space model (e.g., C=[1, 1])";
  parameter Real D[size(C, 1), size(B, 2)]=zeros(size(C, 1), size(B, 2)) 
    "Matrix D of state space model";
  parameter Modelica.Blocks.Types.Init initType=Modelica.Blocks.Types.Init.NoInit
    "Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output)";
  parameter Real x_start[nx]=zeros(nx) "Initial or guess values of states";
  parameter Real y_start[ny]=zeros(ny) 
    "Initial values of outputs (remaining states are in steady state if possible)";

  extends Interfaces.MIMO(final nin=size(B, 2), final nout=size(C, 1));
  output Real x[size(A, 1)](start=x_start) "State vector";

protected 
  parameter Integer nx=size(A, 1) "Number of states";
  parameter Integer ny=size(C, 1) "Number of outputs";
initial equation 
  if initType == Init.SteadyState then
    der(x) = zeros(nx);
  elseif initType == Init.InitialState then
    x = x_start;
  elseif initType == Init.InitialOutput then
    x = Modelica.Math.Matrices.equalityLeastSquares(
      A,
      -B*u,
      C,
      y_start - D*u);
  end if;
equation 
  der(x) = A*x + B*u;
  y = C*x + D*u;
end StateSpace;
 
type Modelica.Blocks.Types.Init = enumeration(NoInit 
      "No initialization (start values are used as guess values with fixed=false)",
      SteadyState 
      "Steady state initialization (derivatives of states are zero)",
      InitialState "Initialization with initial states", InitialOutput 
      "Initialization with initial outputs (and steady state of the states if possible)")
  "Enumeration defining initialization of a block";
 
partial block Modelica.Blocks.Interfaces.MIMO 
  "Multiple Input Multiple Output continuous control block"

  extends Modelica.Blocks.Icons.Block;
  parameter Integer nin=1 "Number of inputs";
  parameter Integer nout=1 "Number of outputs";
  RealInput u[nin] "Connector of Real input signals";
  RealOutput y[nout] "Connector of Real output signals";
end MIMO;
 
connector Modelica.Blocks.Interfaces.RealInput = input Real 
  "'input Real' as connector";
 
block IBM.IBMController
  Modelica.Blocks.Interfaces.RealOutput y;
  Modelica.Blocks.Interfaces.RealInput uf;
  Modelica.Blocks.Interfaces.RealInput uo;
  Modelica.Blocks.Interfaces.RealInput ud;
  parameter Real Ki=0.07;
  parameter Real T=0.01;
  parameter Real t1=4*T, t2=3*T, t3=2*T, t4=T, t5=0;
  Real e1(start=0), e2, e3, e4, e5(start=0);
  Real y1, y2, y3, y4, y5;
  Real zf=uf;
  Real z1;
  Real z2=uo;
  Clock c1=Clock(1, 20);
equation 
  z1 = (z2 - pre(z2))/0.05;
algorithm 
  when Clock(c1, "ImplicitTrapezoid") then
    //y1:=t1*pre(z1)+pre(z2);
    y1 := t1*pre(z1) + pre(z2) + (t1^2/0.05^2)*(z2 - pre(z2) - 0.05*pre(z1));
    e1 := e5 + Ki*T*(zf - y1);

    //y2:=t2*pre(z1)+pre(z2);
    y2 := t2*pre(z1) + pre(z2) + (t2^2/0.05^2)*(z2 - pre(z2) - 0.05*pre(z1));
    e2 := e1 + Ki*T*(zf - y2);

    //y3:=t3*pre(z1)+pre(z2);
    y3 := t3*pre(z1) + pre(z2) + (t3^2/0.05^2)*(z2 - pre(z2) - 0.05*pre(z1));
    e3 := e2 + Ki*T*(zf - y3);

    //y4:=t4*pre(z1)+pre(z2);
    y4 := t4*pre(z1) + pre(z2) + (t4^2/0.05^2)*(z2 - pre(z2) - 0.05*pre(z1));
    e4 := e3 + Ki*T*(zf - y4);

    //y5:=t5*pre(z1)+pre(z2);
    y5 := t5*pre(z1) + pre(z2) + (t5^2/0.05^2)*(z2 - pre(z2) - 0.05*pre(z1));
    e5 := e4 + Ki*T*(zf - y5);
  end when;
equation 
  y = e5;
end IBMController;
